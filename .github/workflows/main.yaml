name: Build Mr Bot

on: [pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    strategy:
      matrix:
        python-version: [3.13]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest coverage

    - name: Lint with flake8
      uses: actions/github-script@v7
      id: lint
      with: 
        result-encoding: string
        debug: true
        script: |
          const { execSync } = require('child_process');
          let results;
          try {
            results = execSync('flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics && flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics', { encoding: 'utf-8' });
          } catch (error) {
            results = error;
          }
          # if github.event_name == 'pull_request' {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### Lint Results\n\`\`\`\n${lintOutput}\n\`\`\``
            });
          # }
          if (results instanceof Error) {
            throw results;
          }
          return results;

    - name: Generate coverage report
      uses: actions/github-script@v7
      id: coverage
      with: 
        result-encoding: string
        debug: true
        script: |
          const { execSync } = require('child_process');
          let results;
          try {
            results = execSync('coverage run -m pytest', { encoding: 'utf-8' });
          } catch (error) {
            results = error;
          }
          if github.event_name == 'pull_request' {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Test Results\n\n### Coverage Report\n\`\`\`\n${coverageOutput}\n\`\`\``
            });
          }
          if (results instanceof Error) {
            throw results;
          }
          return results;
      
